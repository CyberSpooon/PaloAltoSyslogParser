// Palo Alto PanOS Syslog Parser
// Last Updated Date: July 18, 2023
//Pan-OS Version: 11.0
//
//
// Parser Notes:
// Documentation for the Syslog field descriptions can be found here: https://docs.paloaltonetworks.com/pan-os/11-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions
// 
//
// Usage Instructions: 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. PaloAltoSyslogParser).
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. PaloAltoSyslogParser | take 10).
// References : 
// Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// Tech Community Blog on KQL Functions : https://techcommunity.microsoft.com/t5/Azure-Sentinel/Using-KQL-functions-to-speed-up-analysis-in-Azure-Sentinel/ba-p/712381
//
//
let PA_Syslogs = Syslog
| where Computer=="SyslogMachine" //Replace this with the hostname of the syslog machine
| project SyslogMessage, TimeGenerated, SeverityLevel
;
let TRAFFIC_LOG=() 
{
    PA_Syslogs
    | where SyslogMessage has_cs "TRAFFIC"
    | extend parsedTRAFFICSyslog = (split(SyslogMessage, ","))
    | extend
	ReceiveTime=parsedTRAFFICSyslog[0],
	SerialNumber=parsedTRAFFICSyslog[1],
	Type=parsedTRAFFICSyslog[2],
	ThreatContentType=parsedTRAFFICSyslog[3],
	//FUTURE_USE=parsedTRAFFICSyslog[4],
	GeneratedTime=parsedTRAFFICSyslog[5],
	SourceAddress=parsedTRAFFICSyslog[6],
	DestinationAddress=parsedTRAFFICSyslog[7],
	NATSourceIP=parsedTRAFFICSyslog[8],
	NATDestinationIP=parsedTRAFFICSyslog[9],
	RuleName=parsedTRAFFICSyslog[10],
	SourceUser=parsedTRAFFICSyslog[11],
	DestinationUser=parsedTRAFFICSyslog[12],
	Application=parsedTRAFFICSyslog[13],
	VirtualSystem=parsedTRAFFICSyslog[14],
	SourceZone=parsedTRAFFICSyslog[15],
	DestinationZone=parsedTRAFFICSyslog[16],
	InboundInterface=parsedTRAFFICSyslog[17],
	OutboundInterface=parsedTRAFFICSyslog[18],
	LogAction=parsedTRAFFICSyslog[19],
	//FUTURE_USE=parsedTRAFFICSyslog[20],
	SessionID=parsedTRAFFICSyslog[21],
	RepeatCount=parsedTRAFFICSyslog[22],
	SourcePort=parsedTRAFFICSyslog[23],
	DestinationPort=parsedTRAFFICSyslog[24],
	NATSourcePort=parsedTRAFFICSyslog[25],
	NATDestinationPort=parsedTRAFFICSyslog[26],
	Flags=parsedTRAFFICSyslog[27],
	Protocol=parsedTRAFFICSyslog[28],
	Action=parsedTRAFFICSyslog[29],
	Bytes=parsedTRAFFICSyslog[30],
	BytesSent=parsedTRAFFICSyslog[31],
	BytesReceived=parsedTRAFFICSyslog[32],
	Packets=parsedTRAFFICSyslog[33],
	StartTime=parsedTRAFFICSyslog[34],
	ElapsedTime=parsedTRAFFICSyslog[35],
	Category=parsedTRAFFICSyslog[36],
	//FUTURE_USE=parsedTRAFFICSyslog[37],
	SequenceNumber=parsedTRAFFICSyslog[38],
	ActionFlags=parsedTRAFFICSyslog[39],
	SourceCountry=parsedTRAFFICSyslog[40],
	DestinationCountry=parsedTRAFFICSyslog[41],
	//FUTURE_USE=parsedTRAFFICSyslog[42],
	PacketsSent=parsedTRAFFICSyslog[43],
	PacketsReceived=parsedTRAFFICSyslog[44],
	SessionEndReason=parsedTRAFFICSyslog[45],
	DeviceGroupHierarchyLevel1=parsedTRAFFICSyslog[46],
	DeviceGroupHierarchyLevel2=parsedTRAFFICSyslog[47],
	DeviceGroupHierarchyLevel3=parsedTRAFFICSyslog[48],
	DeviceGroupHierarchyLevel4=parsedTRAFFICSyslog[49],
	VirtualSystemName=parsedTRAFFICSyslog[50],
	DeviceName=parsedTRAFFICSyslog[51],
	ActionSource=parsedTRAFFICSyslog[52],
	SourceVMUUID=parsedTRAFFICSyslog[53],
	DestinationVMUUID=parsedTRAFFICSyslog[54],
	TunnelIDIMSI=parsedTRAFFICSyslog[55],
	MonitorTagIMEI=parsedTRAFFICSyslog[56],
	ParentSessionID=parsedTRAFFICSyslog[57],
	ParentStartTime=parsedTRAFFICSyslog[58],
	TunnelType=parsedTRAFFICSyslog[59],
	SCTPAssociationID=parsedTRAFFICSyslog[60],
	SCTPChunks=parsedTRAFFICSyslog[61],
	SCTPChunksSent=parsedTRAFFICSyslog[62],
	SCTPChunksReceived=parsedTRAFFICSyslog[63],
	RuleUUID=parsedTRAFFICSyslog[64],
	HTTP2Connection=parsedTRAFFICSyslog[65],
	AppFlapCount=parsedTRAFFICSyslog[66],
	PolicyID=parsedTRAFFICSyslog[67],
	LinkSwitches=parsedTRAFFICSyslog[68],
	SD_WANCluster=parsedTRAFFICSyslog[69],
	SD_WANDeviceType=parsedTRAFFICSyslog[70],
	SD_WANClusterType=parsedTRAFFICSyslog[71],
	SD_WANSite=parsedTRAFFICSyslog[72],
	DynamicUserGroupName=parsedTRAFFICSyslog[73],
	XFFAddress=parsedTRAFFICSyslog[74],
	SourceDeviceCategory=parsedTRAFFICSyslog[75],
	SourceDeviceProfile=parsedTRAFFICSyslog[76],
	SourceDeviceModel=parsedTRAFFICSyslog[77],
	SourceDeviceVendor=parsedTRAFFICSyslog[78],
	SourceDeviceOSFamily=parsedTRAFFICSyslog[79],
	SourceDeviceOSVersion=parsedTRAFFICSyslog[80],
	SourceHostname=parsedTRAFFICSyslog[81],
	SourceMacAddress=parsedTRAFFICSyslog[82],
	DestinationDeviceCategory=parsedTRAFFICSyslog[83],
	DestinationDeviceProfile=parsedTRAFFICSyslog[84],
	DestinationDeviceModel=parsedTRAFFICSyslog[85],
	DestinationDeviceVendor=parsedTRAFFICSyslog[86],
	DestinationDeviceOSFamily=parsedTRAFFICSyslog[87],
	DestinationDeviceOSVersion=parsedTRAFFICSyslog[88],
	DestinationHostname=parsedTRAFFICSyslog[89],
	DestinationMacAddress=parsedTRAFFICSyslog[90],
	ContainerID=parsedTRAFFICSyslog[91],
	PODNamespace=parsedTRAFFICSyslog[92],
	PODName=parsedTRAFFICSyslog[93],
	SourceExternalDynamicList=parsedTRAFFICSyslog[94],
	DestinationExternalDynamicList=parsedTRAFFICSyslog[95],
	HostID=parsedTRAFFICSyslog[96],
	SerialNumber2=parsedTRAFFICSyslog[97],
	SourceDynamicAddressGroup=parsedTRAFFICSyslog[98],
	DestinationDynamicAddressGroup=parsedTRAFFICSyslog[99],
	SessionOwner=parsedTRAFFICSyslog[100],
	HighResolutionTimestamp=parsedTRAFFICSyslog[101],
	ASliceServiceType=parsedTRAFFICSyslog[102],
	ASliceDifferentiator=parsedTRAFFICSyslog[103],
	ApplicationSubcategory=parsedTRAFFICSyslog[104],
	ApplicationCategory=parsedTRAFFICSyslog[105],
	ApplicationTechnology=parsedTRAFFICSyslog[106],
	ApplicationRisk=parsedTRAFFICSyslog[107],
	ApplicationCharacteristic=parsedTRAFFICSyslog[108],
	ApplicationContainer=parsedTRAFFICSyslog[109],
	TunneledApplication=parsedTRAFFICSyslog[110],
	ApplicationSaaS=parsedTRAFFICSyslog[111],
	ApplicationSanctionedState=parsedTRAFFICSyslog[112],
	Offloaded=parsedTRAFFICSyslog[113],
	FlowType=parsedTRAFFICSyslog[114],
	ClusterName=parsedTRAFFICSyslog[115]
| project-away parsedTRAFFICSyslog
};
let THREAT_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "THREAT"
	| extend parsedTHREATSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedTHREATSyslog[0],
	SerialNumber=parsedTHREATSyslog[1],
	Type=parsedTHREATSyslog[2],
	ThreatContentType=parsedTHREATSyslog[3],
	//FUTURE_USE=parsedTHREATSyslog[4],
	GeneratedTime=parsedTHREATSyslog[5],
	SourceAddress=parsedTHREATSyslog[6],
	DestinationAddress=parsedTHREATSyslog[7],
	NATSourceIP=parsedTHREATSyslog[8],
	NATDestinationIP=parsedTHREATSyslog[9],
	RuleName=parsedTHREATSyslog[10],
	SourceUser=parsedTHREATSyslog[11],
	DestinationUser=parsedTHREATSyslog[12],
	Application=parsedTHREATSyslog[13],
	VirtualSystem=parsedTHREATSyslog[14],
	SourceZone=parsedTHREATSyslog[15],
	DestinationZone=parsedTHREATSyslog[16],
	InboundInterface=parsedTHREATSyslog[17],
	OutboundInterface=parsedTHREATSyslog[18],
	LogAction=parsedTHREATSyslog[19],
	//FUTURE_USE=parsedTHREATSyslog[20],
	SessionID=parsedTHREATSyslog[21],
	RepeatCount=parsedTHREATSyslog[22],
	SourcePort=parsedTHREATSyslog[23],
	DestinationPort=parsedTHREATSyslog[24],
	NATSourcePort=parsedTHREATSyslog[25],
	NATDestinationPort=parsedTHREATSyslog[26],
	Flags=parsedTHREATSyslog[27],
	IPProtocol=parsedTHREATSyslog[28],
	Action=parsedTHREATSyslog[29],
	URLFilename=parsedTHREATSyslog[30],
	ThreatID=parsedTHREATSyslog[31],
	Category=parsedTHREATSyslog[32],
	Severity=parsedTHREATSyslog[33],
	Direction=parsedTHREATSyslog[34],
	SequenceNumber=parsedTHREATSyslog[35],
	ActionFlags=parsedTHREATSyslog[36],
	SourceCountry=parsedTHREATSyslog[37],
	DestinationCountry=parsedTHREATSyslog[38],
	//FUTURE_USE=parsedTHREATSyslog[39],
	ContentType=parsedTHREATSyslog[40],
	PCAP_ID=parsedTHREATSyslog[41],
	FileDigest=parsedTHREATSyslog[42],
	Cloud=parsedTHREATSyslog[43],
	URLIndex=parsedTHREATSyslog[44],
	UserAgent=parsedTHREATSyslog[45],
	FileType=parsedTHREATSyslog[46],
	X_Forwarded_For=parsedTHREATSyslog[47],
	Referer=parsedTHREATSyslog[48],
	Sender=parsedTHREATSyslog[49],
	Subject=parsedTHREATSyslog[50],
	Recipient=parsedTHREATSyslog[51],
	ReportID=parsedTHREATSyslog[52],
	DeviceGroupHierarchyLevel1=parsedTHREATSyslog[53],
	DeviceGroupHierarchyLevel2=parsedTHREATSyslog[54],
	DeviceGroupHierarchyLevel3=parsedTHREATSyslog[55],
	DeviceGroupHierarchyLevel4=parsedTHREATSyslog[56],
	VirtualSystemName=parsedTHREATSyslog[57],
	DeviceName=parsedTHREATSyslog[58],
	//FUTURE_USE=parsedTHREATSyslog[59],
	SourceVMUUID=parsedTHREATSyslog[60],
	DestinationVMUUID=parsedTHREATSyslog[61],
	HTTPMethod=parsedTHREATSyslog[62],
	TunnelIDIMSI=parsedTHREATSyslog[63],
	MonitorTagIMEI=parsedTHREATSyslog[64],
	ParentSessionID=parsedTHREATSyslog[65],
	ParentStartTime=parsedTHREATSyslog[66],
	TunnelType=parsedTHREATSyslog[67],
	ThreatCategory=parsedTHREATSyslog[68],
	ContentVersion=parsedTHREATSyslog[69],
	//FUTURE_USE=parsedTHREATSyslog[70],
	SCTPAssociationID=parsedTHREATSyslog[71],
	PayloadProtocolID=parsedTHREATSyslog[72],
	HTTPHeaders=parsedTHREATSyslog[73],
	URLCategoryList=parsedTHREATSyslog[74],
	RuleUUID=parsedTHREATSyslog[75],
	HTTP2Connection=parsedTHREATSyslog[76],
	DynamicUserGroupName=parsedTHREATSyslog[77],
	XFFAddress=parsedTHREATSyslog[78],
	SourceDeviceCategory=parsedTHREATSyslog[79],
	SourceDeviceProfile=parsedTHREATSyslog[80],
	SourceDeviceModel=parsedTHREATSyslog[81],
	SourceDeviceVendor=parsedTHREATSyslog[82],
	SourceDeviceOSFamily=parsedTHREATSyslog[83],
	SourceDeviceOSVersion=parsedTHREATSyslog[84],
	SourceHostname=parsedTHREATSyslog[85],
	SourceMACAddress=parsedTHREATSyslog[86],
	DestinationDeviceCategory=parsedTHREATSyslog[87],
	DestinationDeviceProfile=parsedTHREATSyslog[88],
	DestinationDeviceModel=parsedTHREATSyslog[89],
	DestinationDeviceVendor=parsedTHREATSyslog[90],
	DestinationDeviceOSFamily=parsedTHREATSyslog[91],
	DestinationDeviceOSVersion=parsedTHREATSyslog[92],
	DestinationHostname=parsedTHREATSyslog[93],
	DestinationMACAddress=parsedTHREATSyslog[94],
	ContainerID=parsedTHREATSyslog[95],
	PODNamespace=parsedTHREATSyslog[96],
	PODName=parsedTHREATSyslog[97],
	SourceExternalDynamicList=parsedTHREATSyslog[98],
	DestinationExternalDynamicList=parsedTHREATSyslog[99],
	HostID=parsedTHREATSyslog[100],
	SerialNumber2=parsedTHREATSyslog[101],
	DomainEDL=parsedTHREATSyslog[102],
	SourceDynamicAddressGroup=parsedTHREATSyslog[103],
	DestinationDynamicAddressGroup=parsedTHREATSyslog[104],
	PartialHash=parsedTHREATSyslog[105],
	HighResolutionTimestamp=parsedTHREATSyslog[106],
	Reason=parsedTHREATSyslog[107],
	Justification=parsedTHREATSyslog[108],
	ASliceServiceType=parsedTHREATSyslog[109],
	ApplicationSubcategory=parsedTHREATSyslog[110],
	ApplicationCategory=parsedTHREATSyslog[111],
	ApplicationTechnology=parsedTHREATSyslog[112],
	ApplicationRisk=parsedTHREATSyslog[113],
	ApplicationCharacteristic=parsedTHREATSyslog[114],
	ApplicationContainer=parsedTHREATSyslog[115],
	TunneledApplication=parsedTHREATSyslog[116],
	ApplicationSaaS=parsedTHREATSyslog[117],
	ApplicationSanctionedState=parsedTHREATSyslog[118],
	CloudReportID=parsedTHREATSyslog[119],
	ClusterName=parsedTHREATSyslog[120],
	FlowType=parsedTHREATSyslog[121]
	| project-away parsedTHREATSyslog
};
let HIPMATCH_LOG=()
{
    PA_Syslogs
    | where SyslogMessage has_cs "HIPMATCH"
	| extend parsedHIPMATCHSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedHIPMATCHSyslog[0],
	SerialNumber=parsedHIPMATCHSyslog[1],
	Type=parsedHIPMATCHSyslog[2],
	ThreatContentType=parsedHIPMATCHSyslog[3],
	//FUTURE_USE1=parsedHIPMATCHSyslog[4],
	GeneratedTime=parsedHIPMATCHSyslog[5],
	SourceUser=parsedHIPMATCHSyslog[6],
	VirtualSystem=parsedHIPMATCHSyslog[7],
	MachineName=parsedHIPMATCHSyslog[8],
	OperatingSystem=parsedHIPMATCHSyslog[9],
	SourceAddress=parsedHIPMATCHSyslog[10],
	HIP=parsedHIPMATCHSyslog[11],
	RepeatCount=parsedHIPMATCHSyslog[12],
	HIPType=parsedHIPMATCHSyslog[13],
	//FUTURE_USE2=parsedHIPMATCHSyslog[14],
	//FUTURE_USE3=parsedHIPMATCHSyslog[15],
	SequenceNumber=parsedHIPMATCHSyslog[16],
	ActionFlags=parsedHIPMATCHSyslog[17],
	DeviceGroupHierarchyLevel1=parsedHIPMATCHSyslog[18],
	DeviceGroupHierarchyLevel2=parsedHIPMATCHSyslog[19],
	DeviceGroupHierarchyLevel3=parsedHIPMATCHSyslog[20],
	DeviceGroupHierarchyLevel4=parsedHIPMATCHSyslog[21],
	VirtualSystemName=parsedHIPMATCHSyslog[22],
	DeviceName=parsedHIPMATCHSyslog[23],
	VirtualSystemID=parsedHIPMATCHSyslog[24],
	IPv6SourceAddress=parsedHIPMATCHSyslog[25],
	HostID=parsedHIPMATCHSyslog[26],
	UserDeviceSerialNumber=parsedHIPMATCHSyslog[27],
	DeviceMACAddress=parsedHIPMATCHSyslog[28],
	HighResolutionTimestamp=parsedHIPMATCHSyslog[29],
	ClusterName=parsedHIPMATCHSyslog[30]
    | project-away parsedHIPMATCHSyslog
};
let GLOBALPROTECT_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "GLOBALPROTECT"
	| extend parsedGLOBALPROTECTSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedGLOBALPROTECTSyslog[0],
	SerialNumber=parsedGLOBALPROTECTSyslog[1],
	Type=parsedGLOBALPROTECTSyslog[2],
	ThreatContentType=parsedGLOBALPROTECTSyslog[3],
	//FUTURE_USE=parsedGLOBALPROTECTSyslog[4],
	GeneratedTime=parsedGLOBALPROTECTSyslog[5],
	VirtualSystem=parsedGLOBALPROTECTSyslog[6],
	EventID=parsedGLOBALPROTECTSyslog[7],
	Stage=parsedGLOBALPROTECTSyslog[8],
	AuthenticationMethod=parsedGLOBALPROTECTSyslog[9],
	TunnelType=parsedGLOBALPROTECTSyslog[10],
	SourceUser=parsedGLOBALPROTECTSyslog[11],
	SourceRegion=parsedGLOBALPROTECTSyslog[12],
	MachineName=parsedGLOBALPROTECTSyslog[13],
	PublicIP=parsedGLOBALPROTECTSyslog[14],
	PublicIPv6=parsedGLOBALPROTECTSyslog[15],
	PrivateIP=parsedGLOBALPROTECTSyslog[16],
	PrivateIPv6=parsedGLOBALPROTECTSyslog[17],
	HostID=parsedGLOBALPROTECTSyslog[18],
	SerialNumber2=parsedGLOBALPROTECTSyslog[19],
	ClientVersion=parsedGLOBALPROTECTSyslog[20],
	ClientOS=parsedGLOBALPROTECTSyslog[21],
	ClientOSVersion=parsedGLOBALPROTECTSyslog[22],
	RepeatCount=parsedGLOBALPROTECTSyslog[23],
	Reason=parsedGLOBALPROTECTSyslog[24],
	Error=parsedGLOBALPROTECTSyslog[25],
	Description=parsedGLOBALPROTECTSyslog[26],
	Status=parsedGLOBALPROTECTSyslog[27],
	Location=parsedGLOBALPROTECTSyslog[28],
	LoginDuration=parsedGLOBALPROTECTSyslog[29],
	ConnectMethod=parsedGLOBALPROTECTSyslog[30],
	ErrorCode=parsedGLOBALPROTECTSyslog[31],
	Portal=parsedGLOBALPROTECTSyslog[32],
	SequenceNumber=parsedGLOBALPROTECTSyslog[33],
	ActionFlags=parsedGLOBALPROTECTSyslog[34],
	HighResTimestamp=parsedGLOBALPROTECTSyslog[35],
	SelectionType=parsedGLOBALPROTECTSyslog[36],
	ResponseTime=parsedGLOBALPROTECTSyslog[37],
	Priority=parsedGLOBALPROTECTSyslog[38],
	AttemptedGateways=parsedGLOBALPROTECTSyslog[39],
	Gateway=parsedGLOBALPROTECTSyslog[40],
	DeviceGroupHierarchyLevel1=parsedGLOBALPROTECTSyslog[41],
	DeviceGroupHierarchyLevel2=parsedGLOBALPROTECTSyslog[42],
	DeviceGroupHierarchyLevel3=parsedGLOBALPROTECTSyslog[43],
	DeviceGroupHierarchyLevel4=parsedGLOBALPROTECTSyslog[44],
	VirtualSystemName=parsedGLOBALPROTECTSyslog[45],
	DeviceName=parsedGLOBALPROTECTSyslog[46],
	VirtualSystemID=parsedGLOBALPROTECTSyslog[47],
	ClusterName=parsedGLOBALPROTECTSyslog[48]
	| project-away parsedGLOBALPROTECTSyslog
};
let IPTAG_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "IPTAG"
	| extend parsedIPTAGSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedIPTAGSyslog[0],
	Serial=parsedIPTAGSyslog[1],
	Type=parsedIPTAGSyslog[2],
	ThreatContentType=parsedIPTAGSyslog[3],
	//FUTURE_USE=parsedIPTAGSyslog[4],
	GenerateTime=parsedIPTAGSyslog[5],
	VirtualSystem=parsedIPTAGSyslog[6],
	SourceIP=parsedIPTAGSyslog[7],
	TagName=parsedIPTAGSyslog[8],
	EventID=parsedIPTAGSyslog[9],
	RepeatCount=parsedIPTAGSyslog[10],
	Timeout=parsedIPTAGSyslog[11],
	DataSourceName=parsedIPTAGSyslog[12],
	DataSourceType=parsedIPTAGSyslog[13],
	DataSourceSubtype=parsedIPTAGSyslog[14],
	SequenceNumber=parsedIPTAGSyslog[15],
	ActionFlags=parsedIPTAGSyslog[16],
	DGHierarchyLevel1=parsedIPTAGSyslog[17],
	DGHierarchyLevel2=parsedIPTAGSyslog[18],
	DGHierarchyLevel3=parsedIPTAGSyslog[19],
	DGHierarchyLevel4=parsedIPTAGSyslog[20],
	VirtualSystemName=parsedIPTAGSyslog[21],
	DeviceName=parsedIPTAGSyslog[22],
	VirtualSystemID=parsedIPTAGSyslog[23],
	HighResolutionTimestamp=parsedIPTAGSyslog[24],
	ClusterName=parsedIPTAGSyslog[25]
	| project-away parsedIPTAGSyslog
};
let USERID_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "USERID"
	| extend parsedUSERIDSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedUSERIDSyslog[0],
	SerialNumber=parsedUSERIDSyslog[1],
	Type=parsedUSERIDSyslog[2],
	ThreatContentType=parsedUSERIDSyslog[3],
	//FUTURE_USE=parsedUSERIDSyslog[4],
	GeneratedTime=parsedUSERIDSyslog[5],
	VirtualSystem=parsedUSERIDSyslog[6],
	SourceIP=parsedUSERIDSyslog[7],
	User=parsedUSERIDSyslog[8],
	DataSourceName=parsedUSERIDSyslog[9],
	EventID=parsedUSERIDSyslog[10],
	RepeatCount=parsedUSERIDSyslog[11],
	TimeOutThreshold=parsedUSERIDSyslog[12],
	SourcePort=parsedUSERIDSyslog[13],
	DestinationPort=parsedUSERIDSyslog[14],
	DataSource=parsedUSERIDSyslog[15],
	DataSourceType=parsedUSERIDSyslog[16],
	SequenceNumber=parsedUSERIDSyslog[17],
	ActionFlags=parsedUSERIDSyslog[18],
	DeviceGroupHierarchyLevel1=parsedUSERIDSyslog[19],
	DeviceGroupHierarchyLevel2=parsedUSERIDSyslog[20],
	DeviceGroupHierarchyLevel3=parsedUSERIDSyslog[21],
	DeviceGroupHierarchyLevel4=parsedUSERIDSyslog[22],
	VirtualSystemName=parsedUSERIDSyslog[23],
	DeviceName=parsedUSERIDSyslog[24],
	VirtualSystemID=parsedUSERIDSyslog[25],
	FactorType=parsedUSERIDSyslog[26],
	FactorCompletionTime=parsedUSERIDSyslog[27],
	FactorNumber=parsedUSERIDSyslog[28],
	UserGroupFlags=parsedUSERIDSyslog[29],
	UserbySource=parsedUSERIDSyslog[30],
	TagName=parsedUSERIDSyslog[31],
	HighResolutionTimestamp=parsedUSERIDSyslog[32],
	OriginDataSource=parsedUSERIDSyslog[33],
	//FUTURE_USE2=parsedUSERIDSyslog[34],
	ClusterName=parsedUSERIDSyslog[35]
	| project-away parsedUSERIDSyslog
};
let DECRYPTION_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "DECRYPTION"
	| extend parsedDECRYPTIONSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedDECRYPTIONSyslog[0],
	SerialNumber=parsedDECRYPTIONSyslog[1],
	Type=parsedDECRYPTIONSyslog[2],
	ThreatContentType=parsedDECRYPTIONSyslog[3],
	ConfigVersion=parsedDECRYPTIONSyslog[4],
	GenerateTime=parsedDECRYPTIONSyslog[5],
	SourceAddress=parsedDECRYPTIONSyslog[6],
	DestinationAddress=parsedDECRYPTIONSyslog[7],
	NATSourceIP=parsedDECRYPTIONSyslog[8],
	NATDestinationIP=parsedDECRYPTIONSyslog[9],
	Rule=parsedDECRYPTIONSyslog[10],
	SourceUser=parsedDECRYPTIONSyslog[11],
	DestinationUser=parsedDECRYPTIONSyslog[12],
	Application=parsedDECRYPTIONSyslog[13],
	VirtualSystem=parsedDECRYPTIONSyslog[14],
	SourceZone=parsedDECRYPTIONSyslog[15],
	DestinationZone=parsedDECRYPTIONSyslog[16],
	InboundInterface=parsedDECRYPTIONSyslog[17],
	OutboundInterface=parsedDECRYPTIONSyslog[18],
	LogAction=parsedDECRYPTIONSyslog[19],
	TimeLogged=parsedDECRYPTIONSyslog[20],
	SessionID=parsedDECRYPTIONSyslog[21],
	RepeatCount=parsedDECRYPTIONSyslog[22],
	SourcePort=parsedDECRYPTIONSyslog[23],
	DestinationPort=parsedDECRYPTIONSyslog[24],
	NATSourcePort=parsedDECRYPTIONSyslog[25],
	NATDestinationPort=parsedDECRYPTIONSyslog[26],
	Flags=parsedDECRYPTIONSyslog[27],
	IPProtocol=parsedDECRYPTIONSyslog[28],
	Action=parsedDECRYPTIONSyslog[29],
	Tunnel=parsedDECRYPTIONSyslog[30],
	//FUTURE_USE=parsedDECRYPTIONSyslog[31],
	//FUTURE_USE2=parsedDECRYPTIONSyslog[32],
	SourceVMUUID=parsedDECRYPTIONSyslog[33],
	DestinationVMUUID=parsedDECRYPTIONSyslog[34],
	UUIDforrule=parsedDECRYPTIONSyslog[35],
	StageforClienttoFirewall=parsedDECRYPTIONSyslog[36],
	StageforFirewalltoServer=parsedDECRYPTIONSyslog[37],
	TLSVersion=parsedDECRYPTIONSyslog[38],
	KeyExchangeAlgorithm=parsedDECRYPTIONSyslog[39],
	EncryptionAlgorithm=parsedDECRYPTIONSyslog[40],
	HashAlgorithm=parsedDECRYPTIONSyslog[41],
	PolicyName=parsedDECRYPTIONSyslog[42],
	EllipticCurve=parsedDECRYPTIONSyslog[43],
	ErrorIndex=parsedDECRYPTIONSyslog[44],
	RootStatus=parsedDECRYPTIONSyslog[45],
	ChainStatus=parsedDECRYPTIONSyslog[46],
	ProxyType=parsedDECRYPTIONSyslog[47],
	CertificateSerialNumber=parsedDECRYPTIONSyslog[48],
	Fingerprint=parsedDECRYPTIONSyslog[49],
	CertificateStartDate=parsedDECRYPTIONSyslog[50],
	CertificateEndDate=parsedDECRYPTIONSyslog[51],
	CertificateVersion=parsedDECRYPTIONSyslog[52],
	CertificateSize=parsedDECRYPTIONSyslog[53],
	CommonNameLength=parsedDECRYPTIONSyslog[54],
	IssuerCommonNameLength=parsedDECRYPTIONSyslog[55],
	RootCommonNameLength=parsedDECRYPTIONSyslog[56],
	SNILength=parsedDECRYPTIONSyslog[57],
	CertificateFlags=parsedDECRYPTIONSyslog[58],
	SubjectCommonName=parsedDECRYPTIONSyslog[59],
	IssuerSubjectCommonName=parsedDECRYPTIONSyslog[60],
	RootSubjectCommonName=parsedDECRYPTIONSyslog[61],
	ServerNameIndication=parsedDECRYPTIONSyslog[62],
	Error=parsedDECRYPTIONSyslog[63],
	ContainerID=parsedDECRYPTIONSyslog[64],
	PODNamespace=parsedDECRYPTIONSyslog[65],
	PODName=parsedDECRYPTIONSyslog[66],
	SourceExternalDynamicList=parsedDECRYPTIONSyslog[67],
	DestinationExternalDynamicList=parsedDECRYPTIONSyslog[68],
	SourceDynamicAddressGroup=parsedDECRYPTIONSyslog[69],
	DestinationDynamicAddressGroup=parsedDECRYPTIONSyslog[70],
	HighResTimestamp=parsedDECRYPTIONSyslog[71],
	SourceDeviceCategory=parsedDECRYPTIONSyslog[72],
	SourceDeviceProfile=parsedDECRYPTIONSyslog[73],
	SourceDeviceModel=parsedDECRYPTIONSyslog[74],
	SourceDeviceVendor=parsedDECRYPTIONSyslog[75],
	SourceDeviceOSFamily=parsedDECRYPTIONSyslog[76],
	SourceDeviceOSVersion=parsedDECRYPTIONSyslog[77],
	SourceHostname=parsedDECRYPTIONSyslog[78],
	SourceMacAddress=parsedDECRYPTIONSyslog[79],
	DestinationDeviceCategory=parsedDECRYPTIONSyslog[80],
	DestinationDeviceProfile=parsedDECRYPTIONSyslog[81],
	DestinationDeviceModel=parsedDECRYPTIONSyslog[82],
	DestinationDeviceVendor=parsedDECRYPTIONSyslog[83],
	DestinationDeviceOSFamily=parsedDECRYPTIONSyslog[84],
	DestinationDeviceOSVersion=parsedDECRYPTIONSyslog[85],
	DestinationHostname=parsedDECRYPTIONSyslog[86],
	DestinationMacAddress=parsedDECRYPTIONSyslog[87],
	SequenceNumber=parsedDECRYPTIONSyslog[88],
	ActionFlags=parsedDECRYPTIONSyslog[89],
	DeviceGroupHierarchyLevel1=parsedDECRYPTIONSyslog[90],
	DeviceGroupHierarchyLevel2=parsedDECRYPTIONSyslog[91],
	DeviceGroupHierarchyLevel3=parsedDECRYPTIONSyslog[92],
	DeviceGroupHierarchyLevel4=parsedDECRYPTIONSyslog[93],
	VirtualSystemName=parsedDECRYPTIONSyslog[94],
	DeviceName=parsedDECRYPTIONSyslog[95],
	VirtualSystemID=parsedDECRYPTIONSyslog[96],
	ApplicationSubcategory=parsedDECRYPTIONSyslog[97],
	ApplicationCategory=parsedDECRYPTIONSyslog[98],
	ApplicationTechnology=parsedDECRYPTIONSyslog[99],
	ApplicationRisk=parsedDECRYPTIONSyslog[100],
	ApplicationCharacteristic=parsedDECRYPTIONSyslog[101],
	ApplicationContainer=parsedDECRYPTIONSyslog[102],
	ApplicationSaaS=parsedDECRYPTIONSyslog[103],
	ApplicationSanctionedState=parsedDECRYPTIONSyslog[104],
	ClusterName=parsedDECRYPTIONSyslog[105]
	| project-away parsedDECRYPTIONSyslog
};
let TUNNELINSPECTION_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "START" or SyslogMessage has_cs "END"
	| extend parsedTUNNELINSPECTIONSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedTUNNELINSPECTIONSyslog[0],
	SerialNumber=parsedTUNNELINSPECTIONSyslog[1],
	Type=parsedTUNNELINSPECTIONSyslog[2],
	Subtype=parsedTUNNELINSPECTIONSyslog[3],
	//FUTURE_USE=parsedTUNNELINSPECTIONSyslog[4],
	GeneratedTime=parsedTUNNELINSPECTIONSyslog[5],
	SourceAddress=parsedTUNNELINSPECTIONSyslog[6],
	DestinationAddress=parsedTUNNELINSPECTIONSyslog[7],
	NATSourceIP=parsedTUNNELINSPECTIONSyslog[8],
	NATDestinationIP=parsedTUNNELINSPECTIONSyslog[9],
	RuleName=parsedTUNNELINSPECTIONSyslog[10],
	SourceUser=parsedTUNNELINSPECTIONSyslog[11],
	DestinationUser=parsedTUNNELINSPECTIONSyslog[12],
	Application=parsedTUNNELINSPECTIONSyslog[13],
	VirtualSystem=parsedTUNNELINSPECTIONSyslog[14],
	SourceZone=parsedTUNNELINSPECTIONSyslog[15],
	DestinationZone=parsedTUNNELINSPECTIONSyslog[16],
	InboundInterface=parsedTUNNELINSPECTIONSyslog[17],
	OutboundInterface=parsedTUNNELINSPECTIONSyslog[18],
	LogAction=parsedTUNNELINSPECTIONSyslog[19],
	//FUTURE_USE2=parsedTUNNELINSPECTIONSyslog[20],
	SessionID=parsedTUNNELINSPECTIONSyslog[21],
	RepeatCount=parsedTUNNELINSPECTIONSyslog[22],
	SourcePort=parsedTUNNELINSPECTIONSyslog[23],
	DestinationPort=parsedTUNNELINSPECTIONSyslog[24],
	NATSourcePort=parsedTUNNELINSPECTIONSyslog[25],
	NATDestinationPort=parsedTUNNELINSPECTIONSyslog[26],
	Flags=parsedTUNNELINSPECTIONSyslog[27],
	Protocol=parsedTUNNELINSPECTIONSyslog[28],
	Action=parsedTUNNELINSPECTIONSyslog[29],
	Severity=parsedTUNNELINSPECTIONSyslog[30],
	SequenceNumber=parsedTUNNELINSPECTIONSyslog[31],
	ActionFlags=parsedTUNNELINSPECTIONSyslog[32],
	SourceLocation=parsedTUNNELINSPECTIONSyslog[33],
	DestinationLocation=parsedTUNNELINSPECTIONSyslog[34],
	DeviceGroupHierarchyLevel1=parsedTUNNELINSPECTIONSyslog[35],
	DeviceGroupHierarchyLevel2=parsedTUNNELINSPECTIONSyslog[36],
	DeviceGroupHierarchyLevel3=parsedTUNNELINSPECTIONSyslog[37],
	DeviceGroupHierarchyLevel4=parsedTUNNELINSPECTIONSyslog[38],
	VirtualSystemName=parsedTUNNELINSPECTIONSyslog[39],
	DeviceName=parsedTUNNELINSPECTIONSyslog[40],
	TunnelIDIMSI=parsedTUNNELINSPECTIONSyslog[41],
	MonitorTagIMEI=parsedTUNNELINSPECTIONSyslog[42],
	ParentSessionID=parsedTUNNELINSPECTIONSyslog[43],
	ParentStartTime=parsedTUNNELINSPECTIONSyslog[44],
	Tunnel=parsedTUNNELINSPECTIONSyslog[45],
	Bytes=parsedTUNNELINSPECTIONSyslog[46],
	BytesSent=parsedTUNNELINSPECTIONSyslog[47],
	BytesReceived=parsedTUNNELINSPECTIONSyslog[48],
	Packets=parsedTUNNELINSPECTIONSyslog[49],
	PacketsSent=parsedTUNNELINSPECTIONSyslog[50],
	PacketsReceived=parsedTUNNELINSPECTIONSyslog[51],
	MaximumEncapsulation=parsedTUNNELINSPECTIONSyslog[52],
	UnknownProtocol=parsedTUNNELINSPECTIONSyslog[53],
	StrictCheck=parsedTUNNELINSPECTIONSyslog[54],
	TunnelFragment=parsedTUNNELINSPECTIONSyslog[55],
	SessionsCreated=parsedTUNNELINSPECTIONSyslog[56],
	SessionsClosed=parsedTUNNELINSPECTIONSyslog[57],
	SessionEndReason=parsedTUNNELINSPECTIONSyslog[58],
	ActionSource=parsedTUNNELINSPECTIONSyslog[59],
	StartTime=parsedTUNNELINSPECTIONSyslog[60],
	ElapsedTime=parsedTUNNELINSPECTIONSyslog[61],
	TunnelInspectionRule=parsedTUNNELINSPECTIONSyslog[62],
	RemoteUserIP=parsedTUNNELINSPECTIONSyslog[63],
	RemoteUserID=parsedTUNNELINSPECTIONSyslog[64],
	RuleUUID=parsedTUNNELINSPECTIONSyslog[65],
	PCAPID=parsedTUNNELINSPECTIONSyslog[66],
	DynamicUserGroup=parsedTUNNELINSPECTIONSyslog[67],
	SourceExternalDynamicList=parsedTUNNELINSPECTIONSyslog[68],
	DestinationExternalDynamicList=parsedTUNNELINSPECTIONSyslog[69],
	HighResolutionTimestamp=parsedTUNNELINSPECTIONSyslog[70],
	ASliceDifferentiator=parsedTUNNELINSPECTIONSyslog[71],
	ASliceServiceType=parsedTUNNELINSPECTIONSyslog[72],
	PDUSessionID=parsedTUNNELINSPECTIONSyslog[73],
	ApplicationSubcategory=parsedTUNNELINSPECTIONSyslog[74],
	ApplicationCategory=parsedTUNNELINSPECTIONSyslog[75],
	ApplicationTechnology=parsedTUNNELINSPECTIONSyslog[76],
	ApplicationRisk=parsedTUNNELINSPECTIONSyslog[77],
	ApplicationCharacteristic=parsedTUNNELINSPECTIONSyslog[78],
	ApplicationContainer=parsedTUNNELINSPECTIONSyslog[79],
	ApplicationSaaS=parsedTUNNELINSPECTIONSyslog[80],
	ApplicationSanctionedState=parsedTUNNELINSPECTIONSyslog[81],
	ClusterName=parsedTUNNELINSPECTIONSyslog[82]
	| project-away parsedTUNNELINSPECTIONSyslog
};
let SCTP_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "SCTP"
	| extend parsedSCTPSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedSCTPSyslog[0],
	SerialNumber=parsedSCTPSyslog[1],
	Type=parsedSCTPSyslog[2],
	//FUTURE_USE2=parsedSCTPSyslog[3],
	//FUTURE_USE3=parsedSCTPSyslog[4],
	GeneratedTime=parsedSCTPSyslog[5],
	SourceAddress=parsedSCTPSyslog[6],
	DestinationAddress=parsedSCTPSyslog[7],
	//FUTURE_USE4=parsedSCTPSyslog[8],
	//FUTURE_USE5=parsedSCTPSyslog[9],
	RuleName=parsedSCTPSyslog[10],
	//FUTURE_USE6=parsedSCTPSyslog[11],
	//FUTURE_USE7=parsedSCTPSyslog[12],
	//FUTURE_USE8=parsedSCTPSyslog[13],
	VirtualSystem=parsedSCTPSyslog[14],
	SourceZone=parsedSCTPSyslog[15],
	DestinationZone=parsedSCTPSyslog[16],
	InboundInterface=parsedSCTPSyslog[17],
	OutboundInterface=parsedSCTPSyslog[18],
	LogAction=parsedSCTPSyslog[19],
	//FUTURE_USE=parsedSCTPSyslog[20],
	SessionID=parsedSCTPSyslog[21],
	RepeatCount=parsedSCTPSyslog[22],
	SourcePort=parsedSCTPSyslog[23],
	DestinationPort=parsedSCTPSyslog[24],
	//FUTURE_USE9=parsedSCTPSyslog[25],
	//FUTURE_USE10=parsedSCTPSyslog[26],
	//FUTURE_USE11=parsedSCTPSyslog[27],
	//FUTURE_USE12=parsedSCTPSyslog[28],
	IPProtocol=parsedSCTPSyslog[29],
	Action=parsedSCTPSyslog[30],
	DeviceGroupHierarchyLevel1=parsedSCTPSyslog[31],
	DeviceGroupHierarchyLevel2=parsedSCTPSyslog[32],
	DeviceGroupHierarchyLevel3=parsedSCTPSyslog[33],
	DeviceGroupHierarchyLevel4=parsedSCTPSyslog[34],
	VirtualSystemName=parsedSCTPSyslog[35],
	DeviceName=parsedSCTPSyslog[36],
	SequenceNumber=parsedSCTPSyslog[37],
	//FUTURE13_USE=parsedSCTPSyslog[38],
	SCTPAssociationID=parsedSCTPSyslog[39],
	PayloadProtocolID=parsedSCTPSyslog[40],
	Severity=parsedSCTPSyslog[41],
	SCTPChunkType=parsedSCTPSyslog[42],
	//FUTURE_USE14=parsedSCTPSyslog[43],
	SCTPVerificationTag1=parsedSCTPSyslog[44],
	SCTPVerificationTag2=parsedSCTPSyslog[45],
	SCTPCauseCode=parsedSCTPSyslog[46],
	DiameterAppID=parsedSCTPSyslog[47],
	DiameterCommandCode=parsedSCTPSyslog[48],
	DiameterAVPCode=parsedSCTPSyslog[49],
	SCTPStreamID=parsedSCTPSyslog[50],
	SCTPAssociationEndReason=parsedSCTPSyslog[51],
	OpCode=parsedSCTPSyslog[52],
	SCCPCallingPartySSN=parsedSCTPSyslog[53],
	SCCPCallingPartyGlobalTitle=parsedSCTPSyslog[54],
	SCTPFilter=parsedSCTPSyslog[55],
	SCTPChunks=parsedSCTPSyslog[56],
	SCTPChunksSent=parsedSCTPSyslog[57],
	SCTPChunksReceived=parsedSCTPSyslog[58],
	Packets=parsedSCTPSyslog[59],
	PacketsSent=parsedSCTPSyslog[60],
	PacketsReceived=parsedSCTPSyslog[61],
	UUIDforrule=parsedSCTPSyslog[62],
	HighResolutionTimestamp=parsedSCTPSyslog[63]
	| project-away parsedSCTPSyslog
};
let AUTHENTICATION_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "AUTHENTICATION"
	| extend parsedAUTHENTICATIONSyslog = (split(SyslogMessage, ","))
	| extend
		ReceiveTime=parsedAUTHENTICATIONSyslog[0],
	SerialNumber=parsedAUTHENTICATIONSyslog[1],
	Type=parsedAUTHENTICATIONSyslog[2],
	ThreatContentType=parsedAUTHENTICATIONSyslog[3],
	//FUTURE_USE=parsedAUTHENTICATIONSyslog[4],
	GeneratedTime=parsedAUTHENTICATIONSyslog[5],
	VirtualSystem=parsedAUTHENTICATIONSyslog[6],
	SourceIP=parsedAUTHENTICATIONSyslog[7],
	User=parsedAUTHENTICATIONSyslog[8],
	NormalizeUser=parsedAUTHENTICATIONSyslog[9],
	Object=parsedAUTHENTICATIONSyslog[10],
	AuthenticationPolicy=parsedAUTHENTICATIONSyslog[11],
	RepeatCount=parsedAUTHENTICATIONSyslog[12],
	AuthenticationID=parsedAUTHENTICATIONSyslog[13],
	Vendor=parsedAUTHENTICATIONSyslog[14],
	LogAction=parsedAUTHENTICATIONSyslog[15],
	ServerProfile=parsedAUTHENTICATIONSyslog[16],
	Description=parsedAUTHENTICATIONSyslog[17],
	ClientType=parsedAUTHENTICATIONSyslog[18],
	EventType=parsedAUTHENTICATIONSyslog[19],
	FactorNumber=parsedAUTHENTICATIONSyslog[20],
	SequenceNumber=parsedAUTHENTICATIONSyslog[21],
	ActionFlags=parsedAUTHENTICATIONSyslog[22],
	DeviceGroupHierarchy1=parsedAUTHENTICATIONSyslog[23],
	DeviceGroupHierarchy2=parsedAUTHENTICATIONSyslog[24],
	DeviceGroupHierarchy3=parsedAUTHENTICATIONSyslog[25],
	DeviceGroupHierarchy4=parsedAUTHENTICATIONSyslog[26],
	VirtualSystemName=parsedAUTHENTICATIONSyslog[27],
	DeviceName=parsedAUTHENTICATIONSyslog[28],
	VirtualSystemID=parsedAUTHENTICATIONSyslog[29],
	AuthenticationProtocol=parsedAUTHENTICATIONSyslog[30],
	UUIDforrule=parsedAUTHENTICATIONSyslog[31],
	HighResolutionTimestamp=parsedAUTHENTICATIONSyslog[32],
	SourceDeviceCategory=parsedAUTHENTICATIONSyslog[33],
	SourceDeviceProfile=parsedAUTHENTICATIONSyslog[34],
	SourceDeviceModel=parsedAUTHENTICATIONSyslog[35],
	SourceDeviceVendor=parsedAUTHENTICATIONSyslog[36],
	SourceDeviceOSFamily=parsedAUTHENTICATIONSyslog[37],
	SourceDeviceOSVersion=parsedAUTHENTICATIONSyslog[38],
	SourceHostname=parsedAUTHENTICATIONSyslog[39],
	SourceMacAddress=parsedAUTHENTICATIONSyslog[40],
	Region=parsedAUTHENTICATIONSyslog[41],
	//FUTURE_USE2=parsedAUTHENTICATIONSyslog[42],
	UserAgent=parsedAUTHENTICATIONSyslog[43],
	SessionID=parsedAUTHENTICATIONSyslog[44],
	ClusterName=parsedAUTHENTICATIONSyslog[45]
	| project-away parsedAUTHENTICATIONSyslog
};
let CONFIG_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "CONFIG"
	| extend parsedCONFIGSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedCONFIGSyslog[0],
	SerialNumber=parsedCONFIGSyslog[1],
	Type=parsedCONFIGSyslog[2],
	Subtype=parsedCONFIGSyslog[3],
	//FUTURE_USE=parsedCONFIGSyslog[4],
	GeneratedTime=parsedCONFIGSyslog[5],
	Host=parsedCONFIGSyslog[6],
	VirtualSystem=parsedCONFIGSyslog[7],
	Command=parsedCONFIGSyslog[8],
	Admin=parsedCONFIGSyslog[9],
	Client=parsedCONFIGSyslog[10],
	Result=parsedCONFIGSyslog[11],
	ConfigurationPath=parsedCONFIGSyslog[12],
	BeforeChangeDetail=parsedCONFIGSyslog[13],
	AfterChangeDetail=parsedCONFIGSyslog[14],
	SequenceNumber=parsedCONFIGSyslog[15],
	ActionFlags=parsedCONFIGSyslog[16],
	DeviceGroupHierarchyLevel1=parsedCONFIGSyslog[17],
	DeviceGroupHierarchyLevel2=parsedCONFIGSyslog[18],
	DeviceGroupHierarchyLevel3=parsedCONFIGSyslog[19],
	DeviceGroupHierarchyLevel4=parsedCONFIGSyslog[20],
	VirtualSystemName=parsedCONFIGSyslog[21],
	DeviceName=parsedCONFIGSyslog[22],
	DeviceGroup=parsedCONFIGSyslog[23],
	AuditComment=parsedCONFIGSyslog[24],
	//FUTURE_USE2=parsedCONFIGSyslog[25],
	HighResolutionTimestamp=parsedCONFIGSyslog[26]
	| project-away parsedCONFIGSyslog
};
let SYSTEM_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "SYSTEM"
	| extend parsedSYSTEMSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedSYSTEMSyslog[0],
	SerialNumber=parsedSYSTEMSyslog[1],
	Type=parsedSYSTEMSyslog[2],
	ContentThreatType=parsedSYSTEMSyslog[3],
	//FUTURE_USE=parsedSYSTEMSyslog[4],
	GeneratedTime=parsedSYSTEMSyslog[5],
	VirtualSystem=parsedSYSTEMSyslog[6],
	EventID=parsedSYSTEMSyslog[7],
	Object=parsedSYSTEMSyslog[8],
	//FUTURE_USE2=parsedSYSTEMSyslog[9],
	//FUTURE_USE3=parsedSYSTEMSyslog[10],
	Module=parsedSYSTEMSyslog[11],
	Severity=parsedSYSTEMSyslog[12],
	Description=parsedSYSTEMSyslog[13],
	SequenceNumber=parsedSYSTEMSyslog[14],
	ActionFlags=parsedSYSTEMSyslog[15],
	DeviceGroupHierarchyLevel1=parsedSYSTEMSyslog[16],
	DeviceGroupHierarchyLevel2=parsedSYSTEMSyslog[17],
	DeviceGroupHierarchyLevel3=parsedSYSTEMSyslog[18],
	DeviceGroupHierarchyLevel4=parsedSYSTEMSyslog[19],
	VirtualSystemName=parsedSYSTEMSyslog[20],
	DeviceName=parsedSYSTEMSyslog[21],
	//FUTURE_USE4=parsedSYSTEMSyslog[22],
	//FUTURE_USE5=parsedSYSTEMSyslog[23],
	HighResolutionTimestamp=parsedSYSTEMSyslog[24]
	| project-away parsedSYSTEMSyslog
};
let CORRELATION_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "CORRELATION"
	| extend parsedCORRELATIONSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedCORRELATIONSyslog[0],
	SerialNumber=parsedCORRELATIONSyslog[1],
	Type=parsedCORRELATIONSyslog[2],
	ContentThreatType=parsedCORRELATIONSyslog[3],
	//FUTURE_USE=parsedCORRELATIONSyslog[4],
	GeneratedTime=parsedCORRELATIONSyslog[5],
	SourceAddress_SourceUser=parsedCORRELATIONSyslog[6],
	VirtualSystem=parsedCORRELATIONSyslog[7],
	Category=parsedCORRELATIONSyslog[8],
	Severity=parsedCORRELATIONSyslog[9],
	DeviceGroupHierarchyLevel1=parsedCORRELATIONSyslog[10],
	DeviceGroupHierarchyLevel2=parsedCORRELATIONSyslog[11],
	DeviceGroupHierarchyLevel3=parsedCORRELATIONSyslog[12],
	DeviceGroupHierarchyLevel4=parsedCORRELATIONSyslog[13],
	VirtualSystemName=parsedCORRELATIONSyslog[14],
	DeviceName=parsedCORRELATIONSyslog[15],
	VirtualSystemID=parsedCORRELATIONSyslog[16],
	ObjectName=parsedCORRELATIONSyslog[17],
	ObjectID=parsedCORRELATIONSyslog[18],
	Evidence=parsedCORRELATIONSyslog[19]
	| project-away parsedCORRELATIONSyslog
};
let GTP_LOG=()
{
	PA_Syslogs
	| where SyslogMessage has_cs "GTP"
	| extend parsedGTPSyslog = (split(SyslogMessage, ","))
	| extend
	ReceiveTime=parsedGTPSyslog[0],
	SerialNumber=parsedGTPSyslog[1],
	Type=parsedGTPSyslog[2],
	ThreatContentType=parsedGTPSyslog[3],
	//FUTURE_USE=parsedGTPSyslog[4],
	GeneratedTime=parsedGTPSyslog[5],
	SourceAddress=parsedGTPSyslog[6],
	DestinationAddress=parsedGTPSyslog[7],
	//FUTURE_USE=parsedGTPSyslog[8],
	//FUTURE_USE=parsedGTPSyslog[9],
	RuleName=parsedGTPSyslog[10],
	//FUTURE_USE=parsedGTPSyslog[11],
	//FUTURE_USE=parsedGTPSyslog[12],
	Application=parsedGTPSyslog[13],
	VirtualSystem=parsedGTPSyslog[14],
	SourceZone=parsedGTPSyslog[15],
	DestinationZone=parsedGTPSyslog[16],
	InboundInterface=parsedGTPSyslog[17],
	OutboundInterface=parsedGTPSyslog[18],
	LogAction=parsedGTPSyslog[19],
	//FUTURE_USE=parsedGTPSyslog[20],
	SessionID=parsedGTPSyslog[21],
	//FUTURE_USE=parsedGTPSyslog[22],
	SourcePort=parsedGTPSyslog[23],
	DestinationPort=parsedGTPSyslog[24],
	//FUTURE_USE=parsedGTPSyslog[25],
	//FUTURE_USE=parsedGTPSyslog[26],
	//FUTURE_USE=parsedGTPSyslog[27],
	Protocol=parsedGTPSyslog[28],
	Action=parsedGTPSyslog[29],
	GTPEventType=parsedGTPSyslog[30],
	MSISDN=parsedGTPSyslog[31],
	AccessPointName=parsedGTPSyslog[32],
	RadioAccessTechnology=parsedGTPSyslog[33],
	GTPMessageType=parsedGTPSyslog[34],
	EndUserIPAddress=parsedGTPSyslog[35],
	TunnelEndpointIdentifier1=parsedGTPSyslog[36],
	TunnelEndpointIdentifier2=parsedGTPSyslog[37],
	GTPInterface=parsedGTPSyslog[38],
	GTPCause=parsedGTPSyslog[39],
	Severity=parsedGTPSyslog[40],
	ServingCountryMCC=parsedGTPSyslog[41],
	ServingNetworkMNC=parsedGTPSyslog[42],
	AreaCode=parsedGTPSyslog[43],
	CellID=parsedGTPSyslog[44],
	GTPEventCode=parsedGTPSyslog[45],
	//FUTURE_USE=parsedGTPSyslog[46],
	//FUTURE_USE=parsedGTPSyslog[47],
	SourceLocation=parsedGTPSyslog[48],
	DestinationLocation=parsedGTPSyslog[49],
	//FUTURE_USE=parsedGTPSyslog[50],
	//FUTURE_USE=parsedGTPSyslog[51],
	//FUTURE_USE=parsedGTPSyslog[52],
	//FUTURE_USE=parsedGTPSyslog[53],
	//FUTURE_USE=parsedGTPSyslog[54],
	//FUTURE_USE=parsedGTPSyslog[55],
	//FUTURE_USE=parsedGTPSyslog[56],
	TunnelIDIMSI=parsedGTPSyslog[57],
	MonitorTagIMEI=parsedGTPSyslog[58],
	//FUTURE_USE=parsedGTPSyslog[59],
	//FUTURE_USE=parsedGTPSyslog[60],
	//FUTURE_USE=parsedGTPSyslog[61],
	//FUTURE_USE=parsedGTPSyslog[62],
	//FUTURE_USE=parsedGTPSyslog[63],
	//FUTURE_USE=parsedGTPSyslog[64],
	//FUTURE_USE=parsedGTPSyslog[65],
	//FUTURE_USE=parsedGTPSyslog[66],
	//FUTURE_USE=parsedGTPSyslog[67],
	//FUTURE_USE=parsedGTPSyslog[68],
	//FUTURE_USE=parsedGTPSyslog[69],
	//FUTURE_USE=parsedGTPSyslog[70],
	//FUTURE_USE=parsedGTPSyslog[71],
	//FUTURE_USE=parsedGTPSyslog[72],
	//FUTURE_USE=parsedGTPSyslog[73],
	//FUTURE_USE=parsedGTPSyslog[74],
	StartTime=parsedGTPSyslog[75],
	ElapsedTime=parsedGTPSyslog[76],
	TunnelInspectionRule=parsedGTPSyslog[77],
	RemoteUserIP=parsedGTPSyslog[78],
	RemoteUserID=parsedGTPSyslog[79],
	UUIDforrule=parsedGTPSyslog[80],
	PCAPID=parsedGTPSyslog[81],
	HighResolutionTimestamp=parsedGTPSyslog[82],
	ASliceServiceType=parsedGTPSyslog[83],
	ASliceDifferentiator=parsedGTPSyslog[84],
	ApplicationSubcategory=parsedGTPSyslog[85],
	ApplicationCategory=parsedGTPSyslog[86],
	ApplicationTechnology=parsedGTPSyslog[87],
	ApplicationRisk=parsedGTPSyslog[88],
	ApplicationCharacteristic=parsedGTPSyslog[89],
	ApplicationContainer=parsedGTPSyslog[90],
	ApplicationSaaS=parsedGTPSyslog[91],
	ApplicationSanctionedState=parsedGTPSyslog[92]
	| project-away parsedGTPSyslog
};
union //isfuzzy=true
TRAFFIC_LOG,THREAT_LOG, HIPMATCH_LOG, GLOBALPROTECT_LOG, IPTAG_LOG, USERID_LOG, DECRYPTION_LOG, TUNNELINSPECTION_LOG, SCTP_LOG, AUTHENTICATION_LOG, CONFIG_LOG, SYSTEM_LOG, CORRELATION_LOG, GTP_LOG
//
// Cleaning up final results
| project-away SyslogMessage, ReceiveTime, GeneratedTime, SerialNumber

